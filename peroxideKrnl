pcall(function()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Player = game:GetService("Players").LocalPlayer;
local player = game:GetService("Players").LocalPlayer;
local Players = game:FindService("Players")
local players = game:FindService("Players")
local runservice = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local PathfindingService = game:GetService("PathfindingService")
local pathfindingService = game:GetService("PathfindingService")
local mobs = {""} -- MOBS TABLE
local npcs = {""}
local fiend = {}
local fiends = {}
local Character = Player.Character
local offset = 0
local zones = {}
local zonesN = {""}
local boss = {}
local enemy = {}
local noclipE = false
local antifall = nil
local tp_speed = 250
local infinite_gas = false
local infinite_blade_durability = false
local character = player.Character
local PathfindingService = game:GetService("PathfindingService")
local client = game:GetService('Players').LocalPlayer
local Sense = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Sirius/request/library/sense/source.lua'))()

local Client = Players.LocalPlayer


local enabled = true
local walkSpeed = 80

function Walkspeed()
    local UIS = game:GetService("UserInputService")
    local RS = game:GetService("RunService")
    local W, A, S, D
    local xVelo, yVelo

    RS.RenderStepped:Connect(function()
        if not enabled then return end
        task.wait(0.1)
        local HRP = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
        local C = game:GetService("Workspace").CurrentCamera
        local LV = C.CFrame.LookVector

        for i,v in pairs(UIS:GetKeysPressed()) do
            if v.KeyCode == Enum.KeyCode.W then
                W = true
            end
            if v.KeyCode == Enum.KeyCode.A then
                A = true
            end
            if v.KeyCode == Enum.KeyCode.S then
                S = true
            end
            if v.KeyCode == Enum.KeyCode.D then
                D = true
            end
        end

        if W == true and S == true then
            yVelo = false
            W,S = nil
        end

        if A == true and D == true then
            xVelo = false
            A,D = nil
        end

        if yVelo ~= false then
            if W == true then
                if xVelo ~= false then
                    if A == true then
                        local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(45), 0)).LookVector
                        HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
                        W,A = nil
                    else
                        if D == true then
                            local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-45), 0)).LookVector
                            HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
                            W,D = nil
                        end
                    end
                end
            else
                if S == true then
                    if xVelo ~= false then
                        if A == true then
                            local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(135), 0)).LookVector
                            HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
                            S,A = nil
                        else
                            if D == true then
                                local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-135), 0)).LookVector
                                HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
                                S,D = nil
                            end
                        end
                    end
                end
            end
        end

if W == true then
   HRP.Velocity = Vector3.new((LV.X * walkSpeed), HRP.Velocity.Y, (LV.Z * walkSpeed))
end
if S == true then
   HRP.Velocity = Vector3.new(-(LV.X * walkSpeed), HRP.Velocity.Y, -(LV.Z * walkSpeed))
end
if A == true then
   local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(90), 0)).LookVector
   HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
end
if D == true then
   local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-90), 0)).LookVector
   HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
end

xVelo, yVelo, W, A, S, D = nil
end)

end

    function closestMob()
        local largest = math.huge
        local closestChild = nil
        local hrp = character:WaitForChild("HumanoidRootPart")
        for i, v in pairs(game:GetService("Workspace").Live:GetChildren()) do
            if v:IsA("Model") and not v:FindFirstChild("Health") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 then
                local magnitude = (character.HumanoidRootPart.Position - v:GetBoundingBox().Position).magnitude
                if magnitude < 30 then
                    closestChild = v
                    largest = magnitude
                end
            end
        end
        return closestChild
    end

    local MobsEsp = {}
    local PlayerESP = {}
    local NPCsEsp = {}
        
    for i, v in pairs(game:GetService("Workspace").Live:GetChildren()) do
    if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and not v:FindFirstChild("Health") then
    local mobName = v.Name:split("_")[1]  -- Extract the part of the name before the underscore
    table.insert(MobsEsp, Sense.AddInstance(v, {
        enabled = false,
        text = mobName .. "\n{distance}",
        distance = true,
        textColor = { Color3.new(0, 1, 0), 1 },
        textOutline = true,
        textOutlineColor = Color3.new(),
        textSize = 13,
        textFont = 2,
        limitDistance = true,
        maxDistance = 100000,
    }))
    end
    end

    for i, v in pairs(game:GetService("Workspace").NPCs:GetChildren()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and not v:FindFirstChild("Health") then
        table.insert(NPCsEsp, Sense.AddInstance(v, {
            enabled = false,
            text = v.Name .. "\n{distance}",
            distance = true,
            textColor = { Color3.new(1, 0, 0), 1 },
            textOutline = true,
            textOutlineColor = Color3.new(),
            textSize = 13,
            textFont = 2,
            limitDistance = true,
            maxDistance = 100000,
        }))
        end
        end

    game:GetService("Workspace").Live.DescendantAdded:Connect(function(v)
        wait(5)
    if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and not v:FindFirstChild("Health") then
    local mobName = v.Name:split("_")[1]  -- Extract the part of the name before the underscore
    if getgenv().MobESP then
    table.insert(MobsEsp, Sense.AddInstance(v, {
        enabled = true,
        text = mobName .. "\n{distance}",
        distance = true,
        textColor = getgenv().MobESPColor,
        textOutline = true,
        textOutlineColor = Color3.new(),
        textSize = getgenv().MobESPSize,
        textFont = 2,
        limitDistance = true,
        maxDistance = 100000,
    }))
    elseif not getgenv().MobESP then
            table.insert(MobsEsp, Sense.AddInstance(v, {
                enabled = false,
                text = mobName .. "\n{distance}",
                distance = true,
                textColor = getgenv().MobESPColor,
                textOutline = true,
                textOutlineColor = Color3.new(),
                textSize = getgenv().MobESPSize,
                textFont = 2,
                limitDistance = true,
                maxDistance = 100000,
            }))
        end
        end
    end)
    
        
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
    Name = "Peroxide â”‚ Skeered Hub",
    LoadingTitle = "Skeered Hub",
    LoadingSubtitle = "by Skeered",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "Skeered Hub", -- Create a custom folder for your hub/game
        FileName = "Peroxide"
    },
    Discord = {
        Enabled = true,
        Invite = "gbHkVD5S2g", 
        RememberJoins = true
    },
    KeySystem = true,
    KeySettings = {
        Title = "Skeered Hub",
        Subtitle = "Key System",
        Note = "Join discord server for the key (.gg/SkeeredHub)",
        FileName = "SkeeredHub Key", 
        SaveKey = true, 
        GrabKeyFromSite = false,
        Key = _G.key
    }
})

-- You do not have to set your tabs & groups up this way, just a prefrence.


local Main = Window:CreateTab("Main", 4483362458)

local Farm = Main:CreateSection("Farming")
Main:CreateToggle({
    Name = "Farm Near Npc",
    CurrentValue = false,
    Flag = "FarmNearNpc",
    SectionParent = Farm,
    Callback = function(v)
        getgenv().FarmAll = v
        if dist == nil then
            dist = 10
        end
        if mode == nil then
            mode = "Front"
        end
        local Humanoid = character.Humanoid
        local hrp = character:WaitForChild("HumanoidRootPart")
        while task.wait() do
            pcall(function()
            
            if getgenv().FarmAll == false then return end

            local mob = closestMob()
            if mobs == nil then
                while task.wait() do
                    task.wait()
                    if getgenv().FarmAll == false then return end
                    if closestMob() ~= nil then break end
                end
            else
                while wait() do
                    task.wait()

                    if getgenv().FarmAll == false then return end

                    if mob and mob:FindFirstChild("Humanoid") ~= nil and mob:FindFirstChild("Humanoid").Health > 0 then
                        local ehum = mob:WaitForChild("Humanoid")
                        local character = player.Character
                        local hrp = character:WaitForChild("HumanoidRootPart")
                        
                        if mode == "Behind" then
                            repeat
                                task.wait()
                                local character = player.Character
                                local hrp = character:WaitForChild("HumanoidRootPart")
                                hrp.CFrame = mob:GetModelCFrame() * CFrame.new(0, 0, tonumber(dist)) * CFrame.Angles(0, 0, 0)
                            until not FarmAll or not mob or mob:FindFirstChild("Humanoid").Health <= 0
                        elseif mode == "Front" then
                            repeat
                                task.wait()
                                local character = Client.Character
                                local hrp = character:WaitForChild("HumanoidRootPart")
                                    hrp.CFrame = mob:GetModelCFrame() * CFrame.new(0, 0, -tonumber(dist)) * CFrame.Angles(0, math.rad(180), 0)

                            until not FarmAll or not mob or mob:FindFirstChild("Humanoid").Health <= 0 
                        elseif mode == nil then
                            game.StarterGui:SetCore("SendNotification", {
                                Title = "Info!",
                                Text = "Select the autofarm mode in the dropdown above",
                                Icon = "",
                                Duration = 2.5
                            })
                        end
                    else
                        break
                    end
                end
            end
            task.wait()
        end)
        end
    end
})

Main:CreateDropdown({
    Name = "Select The Farm Method",
    Options = { 'Front', 'Behind'},
    CurrentOption = "Front",
    MultiSelection = false,
    Flag = "FarmMethod",
    SectionParent = Farm,
    Callback = function(v)
        mode = v
    end,
})

Main:CreateSlider({
    Name = "Autofarm Distance",
    Range = {0, 20},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 10,
    Flag = "WalkspeedSpeed",
    SectionParent = Farm,
    Callback = function(v)
        dist = v
    end,
})

local Teleport = Main:CreateSection("ESP")
Main:CreateToggle({
    Name = "Mobs ESP",
    CurrentValue = false,
    Flag = "MobESP",
    SectionParent = Teleport,
    Callback = function(v)
        getgenv().MobESP = v
        for _, Mob in next, MobsEsp do
            Mob.options.enabled = v
        end
        end
})

Main:CreateSlider({
    Name = "Mob ESP Size",
    Range = {0, 20},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = 13,
    Flag = "WalkspeedSpeed",
    SectionParent = Teleport,
    Callback = function(v)
        getgenv().MobESPSize = v
        for _, Mob in next, MobsEsp do
            Mob.options.textSize = v
        end
    end,
})

Main:CreateToggle({
    Name = "NPC ESP",
    CurrentValue = false,
    Flag = "MobESP",
    SectionParent = Teleport,
    Callback = function(v)
        getgenv().NPCESP = v
        for _, Mob in next, NPCsEsp do
            Mob.options.enabled = v
        end
        end
})

Main:CreateSlider({
    Name = "NPC ESP Size",
    Range = {0, 20},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = 13,
    Flag = "WalkspeedSpeed",
    SectionParent = Teleport,
    Callback = function(v)
        getgenv().NPCESPSize = v
        for _, Mob in next, NPCsEsp do
            Mob.options.textSize = v
        end
    end,
})

local Miscs = Main:CreateSection("Miscs")
Main:CreateSlider({
    Name = "HitBox",
    Range = {0, 20},
    Increment = 1,
    Suffix = "Size",
    CurrentValue = 2,
    Flag = "WalkspeedSpeed",
    SectionParent = Miscs,
    Callback = function(v)
        pcall(function()
            range = v
        for i,v in pairs(game:GetService("Workspace").Live:GetChildren()) do
            if v:IsA("Model") and v ~= client.Character and v:FindFirstChild("HumanoidRootPart") then
                v:FindFirstChild("HumanoidRootPart").Size = Vector3.new(range,range,range)
                v:FindFirstChild("HumanoidRootPart").CanCollide = false
            end
        end
    end)
    end,
})

Main:CreateToggle({
    Name = "WalkSpeed",
    CurrentValue = false,
    Flag = "WalksPEED",
    SectionParent = Miscs,
    Callback = function(v)
        pcall(function()
            Walkspeed()
            enabled = v
        end)
        end
})

Main:CreateSlider({
    Name = "Walkspeed Speed",
    Range = {0, 200},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 100,
    Flag = "WalkspeedSpeed",
    SectionParent = Miscs,
    Callback = function(v)
        walkSpeed = v
    end,
})

player.CharacterAdded:Connect(function(char)
pcall(function()
character = char
end)
end)
Sense.Load()
end)
