

--VARIABILI
local Player = game:GetService'Players'.LocalPlayer;
local UIS = game:GetService'UserInputService';
local mobs = {""} -- MOBS TABLE
local npcs = {""}
getgenv().mob = nil -- SELECTED MOB
getgenv().npc = nil
--MOBS
for _,v in pairs(game:GetService("Workspace").Living:GetChildren()) do -- LOOPS THROUGH ALL MOBS
    insert = true -- VALUE TO CHECK THE MOB
    for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
    if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
end
for _,v in pairs(game:GetService("Workspace").DialogNPCs:GetChildren()) do -- LOOPS THROUGH ALL MOBS
    insert = true -- VALUE TO CHECK THE MOB
    for _,v2 in pairs(npcs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
    if insert then table.insert(npcs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
end
--UI
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Chainsaw Man", HidePremium = false, IntroEnabled = false, SaveConfig = true, ConfigFolder = "Chainsaw man"})

--Tab
local autoFarm = Window:MakeTab({
	Name = "AutoFarm",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
local teleport = Window:MakeTab({
	Name = "Teleport",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
local localCheats = Window:MakeTab({
	Name = "localCheats",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
--Toggles
autoFarm:AddDropdown({
	Name = "mobdropdown",
	Default = "1",
	Options = mobs,
	Callback = function(v)
		getgenv().mob = v
	end    
})
teleport:AddDropdown({
	Name = "NPC",
	Default = "1",
	Options = npcs,
	Callback = function(t)
        getgenv().npc = t
		game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame * CFrame.new(0,0,6)
	end    
})

autoFarm:AddToggle({
	Name = "Autofarm",
	Default = false,
	Callback = function(v)
        getgenv().autofarmmobs = v
        while wait() do -- INFINITE LOOP
            if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
            if getgenv().mob == nil then -- IF THE MOB ISNT SELECTED
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Error!", -- NOTIFICACTION LABEL
                    Text = "You havent selected a mob with the dropdown above\nUntoggle this toggle!", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                getgenv().autofarmmobs = false -- TURN OFF THE AUTO FARM
                return -- MAKE SURE IT DOESNT EXECUTE ANYTHING UNDER // FULLY TURN OFF THE LOOP
            end
            local mob = game:GetService("Workspace").Living:FindFirstChild(getgenv().mob)
            if mob == nil then
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Info!", -- NOTIFICACTION LABEL
                    Text = "There is currently no spawned mobs of this type!\nJust wait until they spawn", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                while wait() do -- LOOP WHICH REPEATS UNTIL THE UNTIL IS TRUE / DONE
                    wait() -- WAIT SO WE DONT CRASH
                    if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if game:GetService("Workspace").Living:FindFirstChild(getgenv().mob) ~= nil then break; end
                end -- IF THE MOB IS SPAWNED THEN GO ON WITH THE AUTOFARM
            else
                local mob2 = mob
                while wait() do
                    mob = game:GetService("Workspace").Living:FindFirstChild(getgenv().mob)
                    if mob ~= mob2 then break; end
                    if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if mob ~= nil then
                        if mob:FindFirstChild("Humanoid") then
                            if mob.Humanoid.Health == 0 then wait(0.1) mob:Destroy() break; end -- IF THE MOB IS DEAD THEN JUST DESTROY IT FOR FASTER FARMING
                        end
                        if mob:FindFirstChild("HumanoidRootPart") then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame * CFrame.new(0,0,6) -- TELEPORT TO THE MOB
                            end
                        end
                    end
                    wait() -- WAIT SO WE DONT CRASH
                end
            end
        end
})

teleport:AddToggle({
	Name = "Teleport",
	Default = false,
	Callback = function(t)
        getgenv().teleport = t
        while wait() do -- INFINITE LOOP
            if getgenv().teleport == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
            if getgenv().npc == nil then -- IF THE MOB ISNT SELECTED
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Error!", -- NOTIFICACTION LABEL
                    Text = "You havent selected a mob with the dropdown above\nUntoggle this toggle!", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                getgenv().teleport = false -- TURN OFF THE AUTO FARM
                return -- MAKE SURE IT DOESNT EXECUTE ANYTHING UNDER // FULLY TURN OFF THE LOOP
            end
            local npc = game:GetService("Workspace").DialogNPCs:FindFirstChild(getgenv().npc)
            if npc == nil then
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Info!", -- NOTIFICACTION LABEL
                    Text = "There is currently no spawned mobs of this type!\nJust wait until they spawn", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                while wait() do -- LOOP WHICH REPEATS UNTIL THE UNTIL IS TRUE / DONE
                    wait() -- WAIT SO WE DONT CRASH
                    if getgenv().teleport == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if game:GetService("Workspace").DialogNPCs:FindFirstChild(getgenv().npc) ~= nil then break; end
                end -- IF THE MOB IS SPAWNED THEN GO ON WITH THE AUTOFARM
            else
                local npc2 = npc
                while wait() do
                    npc = game:GetService("Workspace").DialogNPCs:FindFirstChild(getgenv().npc)
                    if npc ~= npc2 then break; end
                    if getgenv().teleport == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if npc ~= nil then
                        if npc:FindFirstChild("Humanoid") then
                            if npc.Humanoid.Health == 0 then wait(0.1) npc:Destroy() break; end -- IF THE MOB IS DEAD THEN JUST DESTROY IT FOR FASTER FARMING
                        end
                        if npc:FindFirstChild("HumanoidRootPart") then
                                wait()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame * CFrame.new(0,2,0) -- TELEPORT TO THE MOB
                            getgenv().teleport = false
                            end
                        end
                    end
                    wait() -- WAIT SO WE DONT CRASH
                end
            end
        end
})
localCheats:AddButton({
	Name = "WalkSpeed (LEFT SHIFT)",
	Default = false,
	Callback = function(Value)
		local Player = game:GetService'Players'.LocalPlayer;
local UIS = game:GetService'UserInputService';
UIS.InputBegan:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.LeftShift then
            _G.Running = true
                while wait(0.005) and _G.Running == true do
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 1
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 1
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 1
end
        end
end)
UIS.InputEnded:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.LeftShift then
                _G.Running = false
        end
end)
	end    
})



-- UPDATING THE MOBS
 
game:GetService("Workspace").Living.ChildAdded:Connect(function() -- WHEN MOB SPAWNS
    for _,v2 in pairs(mobs) do table.remove(mobs, _) end -- REMOVES ALL THE OLD MOBS
    -- ADDS THE NEW MOBS
    for _,v in pairs(game:GetService("Workspace").Living:GetChildren()) do -- LOOPS THROUGH ALL MOBS
        insert = true -- VALUE TO CHECK THE MOB
        for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
        if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
    end
    mobdropdown:Refresh(mobs,true)
end)

game:GetService("Workspace").Living.ChildRemoved:Connect(function() -- WHEN MOB DIES / GETS REMOVED
    for _,v2 in pairs(mobs) do table.remove(mobs, _) end -- REMOVES ALL THE OLD MOBS
    -- ADDS THE NEW MOBS
    for _,v in pairs(game:GetService("Workspace").Living:GetChildren()) do -- LOOPS THROUGH ALL MOBS
        insert = true -- VALUE TO CHECK THE MOB
        for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
        if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
    end
    mobdropdown:Refresh(mobs,true)
end)
OrionLib:Init()
