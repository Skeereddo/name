local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
local Player = game:GetService("Players").LocalPlayer;
local UIS = game:GetService'UserInputService';

local Players = game:FindService("Players")
local camera = game:GetService("Workspace").CurrentCamera
local CurrentCamera = Workspace.CurrentCamera
local worldToViewportPoint = CurrentCamera.worldToViewportPoint
local UserInputService = cloneref(game:GetService'UserInputService')
local mobs = {""} -- MOBS TABLE
local npcs = {""}
getgenv().mob = nil -- SELECTED MOB
getgenv().npc = nil
getgenv().Esp = false

--MOBS
for _,v in pairs(game:GetService("Workspace").Living:GetChildren()) do -- LOOPS THROUGH ALL MOBS
    insert = true -- VALUE TO CHECK THE MOB
    for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
    if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
end
--NPCS
for _,v in pairs(game:GetService("Workspace").DialogNPCs:GetChildren()) do -- LOOPS THROUGH ALL NPCS
    insert = true -- VALUE TO CHECK THE MOB
    for _,v2 in pairs(npcs) do if v2 == v.Name then insert = false end end -- CHECKS IF NPCS IS ALREADY IN THE TABLE
    if insert then table.insert(npcs, v.Name) end -- IF THE NPCS ISNT INSERTED THEN INSERT IT
end

local Window = Rayfield:CreateWindow({
	Name = "Chainsaw Man: Devil's Heart",
	LoadingTitle = "Skeered Hub",
	LoadingSubtitle = "by Skeered",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "Skeered Hub",
		FileName = "Rayfield"
	},
	KeySystem = false, -- Set this to true to use their key system
	KeySettings = {
		Title = "Sirius Hub",
		Subtitle = "Key System",
		Note = "Join the discord (discord.gg/sirius)",
		SaveKey = true,
		Key = "ABCDEF"
	}
})

Rayfield:Notify({
    Title = "Welcome to Skeered Hub",
    Content = "Chainsaw Man: Devil's Heart",
    Duration = 2.5,
    Image = 4483362458,
    Actions = { -- Notification Buttons
        Ignore = {
            Name = "Okay!",
            Callback = function()
        end
        },
        },
    })

local Autofarm = Window:CreateTab("Autofarm", 4483345998) -- Title, Image
local Teleport = Window:CreateTab("Teleport", 4370305588) -- Title, Image
local localCheats = Window:CreateTab("LocalCheats", 6961018885) -- Title, Image
local Esp = Window:CreateTab("ESP", 10802202912) -- Title, Image
local Farm = Autofarm:CreateSection("Mob/Player farm")
local NPC = Teleport:CreateSection("NPCs")
local Movement = localCheats:CreateSection("Movements")
local PlayerESP = Esp:CreateSection("Player ESP")

local Mobchoose = Autofarm:CreateDropdown({
	Name = "Mob/Player",
	Options = mobs,
	CurrentOption = "Skeered HUB",
	Flag = "MobPlayer", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		getgenv().mob = v
	end,
})
local NpcChoose = Teleport:CreateDropdown({
	Name = "NPCs",
	Options = npcs,
	CurrentOption = "1",
	Flag = "Npc", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(t)
		getgenv().npc = t
		getgenv().teleport = t
            local npc = game:GetService("Workspace").DialogNPCs:FindFirstChild(getgenv().npc)
                    npc = game:GetService("Workspace").DialogNPCs:FindFirstChild(getgenv().npc)
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame * CFrame.new(0,2,-5) -- TELEPORT TO THE MOB
                            getgenv().teleport = false        
                    wait() -- WAIT SO WE DONT CRASH
				end})
        

local Farmstart = Autofarm:CreateToggle({
	Name = "Mob/Player farm",
	CurrentValue = false,
	Flag = "Farmstart", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		getgenv().autofarmmobs = v
        while wait() do -- INFINITE LOOP
            if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
            if getgenv().mob == nil then -- IF THE MOB ISNT SELECTED
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Error!", -- NOTIFICACTION LABEL
                    Text = "You havent selected a mob with the dropdown above\nUntoggle this toggle!", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                getgenv().autofarmmobs = false -- TURN OFF THE AUTO FARM
                return -- MAKE SURE IT DOESNT EXECUTE ANYTHING UNDER // FULLY TURN OFF THE LOOP
            end
            local mob = game:GetService("Workspace").Living:FindFirstChild(getgenv().mob)
            if mob == nil then
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Info!", -- NOTIFICACTION LABEL
                    Text = "There is currently no spawned mobs of this type!\nJust wait until they spawn", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                while wait() do -- LOOP WHICH REPEATS UNTIL THE UNTIL IS TRUE / DONE
                    wait() -- WAIT SO WE DONT CRASH
                    if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if game:GetService("Workspace").Living:FindFirstChild(getgenv().mob) ~= nil then break; end
                end -- IF THE MOB IS SPAWNED THEN GO ON WITH THE AUTOFARM
            else
                local mob2 = mob
                while wait() do
                    mob = game:GetService("Workspace").Living:FindFirstChild(getgenv().mob)
                    if mob ~= mob2 then break; end
                    if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if mob ~= nil then
                        if mob:FindFirstChild("Humanoid") then
                            if mob.Humanoid.Health == 0 then wait(0.1) mob:Destroy() break; end -- IF THE MOB IS DEAD THEN JUST DESTROY IT FOR FASTER FARMING
                        end
                        if mob:FindFirstChild("HumanoidRootPart") then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame * CFrame.new(0,0,6) -- TELEPORT TO THE MOB
                            local A_1 = "NormalAttack"
                            local hit = game:GetService("ReplicatedStorage").events.remote
                            hit:FireServer(A_1)
                            end
                        end
                    end
                    wait() -- WAIT SO WE DONT CRASH
                end
            end
        end
	})
local Autoattack = Autofarm:CreateToggle({
	Name = "Auto Attack",
	CurrentValue = false,
	Flag = "Attack", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		getgenv().autoattack = v
		while getgenv().autoattack == true do
		wait(0.5)
		local A_1 = "NormalAttack"
		local hit = game:GetService("ReplicatedStorage").events.remote
		hit:FireServer(A_1)
		end
	end,
})
local Update = Autofarm:CreateButton({
	Name = "Update Dropdown",
	Callback = function()
		Mobchoose:Set("Skeered HUB")
	end,
})
local walkKey = localCheats:CreateKeybind({
	Name = "Walkspeed Keybind",
	CurrentKeybind = "Y",
	HoldToInteract = false,
	Flag = "WalkKey", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Keybind)
		_G.Running = true
		while wait(0.005) and _G.Running == true do
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 3
		end
	end
})

UIS.InputEnded:connect(function(UserInput)
	if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode[walkKey.CurrentKeybind] then
		_G.Running = false
	end
end)
local InfJump = localCheats:CreateButton({
	Name = "Infinite Jump",
	Callback = function()
        _G.JumpHeight = 150;
 
        function Action(Object, Function) if Object ~= nil then Function(Object); end end
 
        UIS.InputBegan:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
        Action(Player.Character.Humanoid, function(self)
            if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                Action(self.Parent.HumanoidRootPart, function(self)
                    self.Velocity = Vector3.new(0, _G.JumpHeight, 0);
                            end)
                        end
                    end)
                end
            end)
        end
        })
local PEsp = Esp:CreateToggle({
			Name = "Player ESP",
			CurrentValue = false,
			Flag = "PEsp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
			Callback = function(y)
				getgenv().esp = y
                local esp2 = esp
                    if esp ~= esp2 then end
                    if getgenv().esp == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if esp == true then
                        local Esp = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/x114/RobloxScripts/main/OpenSourceEsp"))()
                        -- Boxes --
                        Esp.Box = true
                        Esp.BoxColor = Color3.fromRGB(255,255,255)
                        Esp.BoxOutline = true
                        Esp.BoxOutlineColor = Color3.fromRGB(0,0,0)
                        -- HealthBars --
                        Esp.HealthBar = true
                        Esp.HealthBarSide = "Left" -- Left,Bottom,Right
                        -- Names --
                        Esp.Names = true
                        Esp.NamesColor = Color3.fromRGB(255,255,255)
                        Esp.NamesOutline = true
                        Esp.NamesFont = 2
                        Esp.NamesSize = 13
                        while esp == true do
                            wait()
                        if esp == false then
                            Esp.Box = false
                            Esp.HealthBar = false
                            Esp.Names = false
                                end   
                            end
                        end
                    end})
local ServerHop = Autofarm:CreateButton({
				Name = "ServerHop",
				Callback = function()
					Time = 1 -- seconds
					repeat wait() until game:IsLoaded()
					wait(Time)
					local PlaceID = game.PlaceId
					local AllIDs = {}
					local foundAnything = ""
					local actualHour = os.date("!*t").hour
					local Deleted = false
					function TPReturner()
					local Site;
					if foundAnything == "" then
						Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. 11345435986 .. '/servers/Public?sortOrder=Asc&limit=100'))
					else
						Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. 11345435986 .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
						end
					local ID = ""
					if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
						foundAnything = Site.nextPageCursor
						end
					local num = 0;
					for i,v in pairs(Site.data) do
					local Possible = true
						ID = tostring(v.id)
					if tonumber(v.maxPlayers) > tonumber(v.playing) then
					for _,Existing in pairs(AllIDs) do
					if num ~= 0 then
					if ID == tostring(Existing) then
						Possible = false
					end
					else
					if tonumber(actualHour) ~= tonumber(Existing) then
					local delFile = pcall(function()
						delfile("NotSameServers.json")
						AllIDs = {}
						table.insert(AllIDs, actualHour)
					end)
					end
					end
						num = num + 1
					end
					if Possible == true then
						table.insert(AllIDs, ID)
						wait()
						pcall(function()
						writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
						wait()
						game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
					end)
						wait(4)
					end
					end
					end
					end
					function Teleport()
					while wait() do
						pcall(function()
							TPReturner()
							if foundAnything ~= "" then
								TPReturner()
					end
					end)
					end
					end
					-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
					Teleport()
				end,
})
