--VARIABILI
local Player = game:GetService("Players").LocalPlayer;
local UIS = game:GetService'UserInputService';
local mobs = {""} -- MOBS TABLE
local npcs = {""}
local Players = game:FindService("Players")
local camera = game:GetService("Workspace").CurrentCamera
local CurrentCamera = Workspace.CurrentCamera
local worldToViewportPoint = CurrentCamera.worldToViewportPoint
local UserInputService = cloneref(game:GetService'UserInputService')
local HttpService = cloneref(game:GetService'HttpService')
local TweenService = cloneref(game:GetService'TweenService')
local RunService = cloneref(game:GetService'RunService')
local Players = game:GetService'Players'
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
local V2New = Vector2.new
local V3New = Vector3.new
local WTVP = Camera.WorldToViewportPoint
local WorldToViewport = function(...) return WTVP(Camera, ...) end
local Menu = {}
local MouseHeld = false
local LastRefresh = 0
local OptionsFile = 'IC3_ESP_SETTINGS.dat'
local Binding = false
local BindedKey = nil
local OIndex = 0
local LineBox = {}
local UIButtons = {}
local Sliders = {}
local ColorPicker = { Loading = false, LastGenerated = 0 }
local Dragging = false
local DraggingUI = false
local Rainbow = false
local DragOffset = V2New()
local DraggingWhat = nil
local OldData = {}
local IgnoreList = {}
local EnemyColor = Color3.new(1, 0, 0)
local TeamColor = Color3.new(0, 1, 0)
local MenuLoaded = false
local ErrorLogging = false
local TracerPosition = V2New(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y - 135)
local DragTracerPosition = false
local SubMenu = {}
local IsSynapse = syn and not PROTOSMASHER_LOADED
local Connections = { Active = {} }
local Signal = {} Signal.__index = Signal
local GetCharacter, CurrentColorPicker, Spectating

local HeadOff = Vector3.new(0, 0.5, 0)
local LegOff = Vector3.new(0,3,0)
getgenv().mob = nil -- SELECTED MOB
getgenv().npc = nil
--MOBS
for _,v in pairs(game:GetService("Workspace").Living:GetChildren()) do -- LOOPS THROUGH ALL MOBS
    insert = true -- VALUE TO CHECK THE MOB
    for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
    if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
end
for _,v in pairs(game:GetService("Workspace").DialogNPCs:GetChildren()) do -- LOOPS THROUGH ALL MOBS
    insert = true -- VALUE TO CHECK THE MOB
    for _,v2 in pairs(npcs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
    if insert then table.insert(npcs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
end
--UI
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Chainsaw Man", HidePremium = false, IntroEnabled = false, SaveConfig = true, ConfigFolder = "Chainsaw man"})

--Tab
local autoFarm = Window:MakeTab({
	Name = "AutoFarm",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
local teleport = Window:MakeTab({
	Name = "Teleport",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
local localCheats = Window:MakeTab({
	Name = "localCheats",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})



--Toggles
autoFarm:AddDropdown({
	Name = "mobdropdown",
	Default = "1",
	Options = mobs,
	Callback = function(v)
		getgenv().mob = v
	end    
})
teleport:AddDropdown({
	Name = "NPC",
	Default = "1",
	Options = npcs,
	Callback = function(t)
        getgenv().npc = t
		game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame * CFrame.new(0,0,6)
	end    
})

autoFarm:AddToggle({
	Name = "Autofarm",
	Default = false,
	Callback = function(v)
        getgenv().autofarmmobs = v
        while wait() do -- INFINITE LOOP
            if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
            if getgenv().mob == nil then -- IF THE MOB ISNT SELECTED
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Error!", -- NOTIFICACTION LABEL
                    Text = "You havent selected a mob with the dropdown above\nUntoggle this toggle!", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                getgenv().autofarmmobs = false -- TURN OFF THE AUTO FARM
                return -- MAKE SURE IT DOESNT EXECUTE ANYTHING UNDER // FULLY TURN OFF THE LOOP
            end
            local mob = game:GetService("Workspace").Living:FindFirstChild(getgenv().mob)
            if mob == nil then
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Info!", -- NOTIFICACTION LABEL
                    Text = "There is currently no spawned mobs of this type!\nJust wait until they spawn", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                while wait() do -- LOOP WHICH REPEATS UNTIL THE UNTIL IS TRUE / DONE
                    wait() -- WAIT SO WE DONT CRASH
                    if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if game:GetService("Workspace").Living:FindFirstChild(getgenv().mob) ~= nil then break; end
                end -- IF THE MOB IS SPAWNED THEN GO ON WITH THE AUTOFARM
            else
                local mob2 = mob
                while wait() do
                    mob = game:GetService("Workspace").Living:FindFirstChild(getgenv().mob)
                    if mob ~= mob2 then break; end
                    if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if mob ~= nil then
                        if mob:FindFirstChild("Humanoid") then
                            if mob.Humanoid.Health == 0 then wait(0.1) mob:Destroy() break; end -- IF THE MOB IS DEAD THEN JUST DESTROY IT FOR FASTER FARMING
                        end
                        if mob:FindFirstChild("HumanoidRootPart") then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame * CFrame.new(0,0,6) -- TELEPORT TO THE MOB
                            end
                        end
                    end
                    wait() -- WAIT SO WE DONT CRASH
                end
            end
        end
})

teleport:AddToggle({
	Name = "Teleport",
	Default = false,
	Callback = function(t)
        getgenv().teleport = t
        while wait() do -- INFINITE LOOP
            if getgenv().teleport == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
            if getgenv().npc == nil then -- IF THE MOB ISNT SELECTED
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Error!", -- NOTIFICACTION LABEL
                    Text = "You havent selected a mob with the dropdown above\nUntoggle this toggle!", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                getgenv().teleport = false -- TURN OFF THE AUTO FARM
                return -- MAKE SURE IT DOESNT EXECUTE ANYTHING UNDER // FULLY TURN OFF THE LOOP
            end
            local npc = game:GetService("Workspace").DialogNPCs:FindFirstChild(getgenv().npc)
            if npc == nil then
                game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION
                    Title = "Info!", -- NOTIFICACTION LABEL
                    Text = "There is currently no spawned mobs of this type!\nJust wait until they spawn", -- NOTIFICATION DESCRIPTION / TEXT
                    Icon = "", -- ICON (NO ICON)
                    Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn
                })
                while wait() do -- LOOP WHICH REPEATS UNTIL THE UNTIL IS TRUE / DONE
                    wait() -- WAIT SO WE DONT CRASH
                    if getgenv().teleport == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if game:GetService("Workspace").DialogNPCs:FindFirstChild(getgenv().npc) ~= nil then break; end
                end -- IF THE MOB IS SPAWNED THEN GO ON WITH THE AUTOFARM
            else
                local npc2 = npc
                while wait() do
                    npc = game:GetService("Workspace").DialogNPCs:FindFirstChild(getgenv().npc)
                    if npc ~= npc2 then break; end
                    if getgenv().teleport == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
                    if npc ~= nil then
                        if npc:FindFirstChild("Humanoid") then
                            if npc.Humanoid.Health == 0 then wait(0.1) npc:Destroy() break; end -- IF THE MOB IS DEAD THEN JUST DESTROY IT FOR FASTER FARMING
                        end
                        if npc:FindFirstChild("HumanoidRootPart") then
                                wait()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame * CFrame.new(0,2,0) -- TELEPORT TO THE MOB
                            getgenv().teleport = false
                            end
                        end
                    end
                    wait() -- WAIT SO WE DONT CRASH
                end
            end
        end
})
localCheats:AddButton({
	Name = "WalkSpeed (LEFT SHIFT)",
	Default = false,
	Callback = function(Value)
		local Player = game:GetService'Players'.LocalPlayer;
        UIS.InputBegan:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.LeftShift then
            _G.Running = true
                while wait(0.005) and _G.Running == true do
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 1
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 1
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 1
            end
        end
end)
UIS.InputEnded:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.LeftShift then
                _G.Running = false
        end
end)
	end    
})

localCheats:AddButton({
	Name = "Infinite jump!",
	Callback = function()
        _G.JumpHeight = 150;
 
        function Action(Object, Function) if Object ~= nil then Function(Object); end end
 
        UIS.InputBegan:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
        Action(Player.Character.Humanoid, function(self)
            if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                Action(self.Parent.HumanoidRootPart, function(self)
                    self.Velocity = Vector3.new(0, _G.JumpHeight, 0);
                         end)
                        end
                    end)
                end
            end)
        end
     })
     if getgenv().Stop == true then return end
        local Outlines = true
        local OutlineColoring = Color3.fromRGB(255, 255, 255)
        local OutlineFill = false
        local FillOpacity = 1
        local FillColoring = Color3.fromRGB(255, 255, 255)
        
        local NameTags = true
        local TextFont = Enum.Font.RobotoMono
        local NameColor = Color3.fromRGB(255, 255, 255)
        local NamePositioning = false
        
        
        local Folder = Instance.new("Folder", game:GetService("CoreGui"))
        Folder.Name = ""
        
        AddOutline = function(Character)
            local Highlight = Instance.new("Highlight", Folder)
            
            Highlight.OutlineColor = OutlineColoring
            Highlight.Adornee = Character
            
            if OutlineFill == true then
                Highlight.FillColor = FillColoring
                Highlight.FillTransparency = FillOpacity
            else
                Highlight.FillTransparency = 1
            end
        end
        
        AddNameTag = function(Character)
            local BGui = Instance.new("BillboardGui", Folder)
            local Frame = Instance.new("Frame", BGui)
            local TextLabel = Instance.new("TextLabel", Frame)
            
            BGui.Adornee = Character:WaitForChild("Head")
            BGui.StudsOffset = Vector3.new(0, 3, 0)
            BGui.AlwaysOnTop = true
            
            BGui.Size = UDim2.new(4, 0, 0.5, 0)
            Frame.Size = UDim2.new(1, 0, 1, 0)
            TextLabel.Size = UDim2.new(1, 0, 1, 0)
            
            Frame.BackgroundTransparency = 1
            TextLabel.BackgroundTransparency = 1
            
            TextLabel.Text = Character.Name
            TextLabel.Font = TextFont
            TextLabel.TextColor3 = NameColor
            TextLabel.TextScaled = NamePositioning
        end
        
        for i, v in ipairs(game:GetService("Players"):GetPlayers()) do
            if v ~= game:GetService("Players").LocalPlayer then
                v.CharacterAdded:Connect(function(Character)
                    if Outlines == true then
                        AddOutline(Character)
                    end
                    if NameTags == true then
                        AddNameTag(Character)
                    end
                end)
                
                if v.Character then
                    if Outlines == true then
                        AddOutline(v.Character)
                    end
                    if NameTags == true then
                        AddNameTag(v.Character)
                    end
                end
            end
            getgenv().Stop = true
        end
        
        game:GetService("Players").PlayerAdded:Connect(function(Player)
            Player.CharacterAdded:Connect(function(Character)
                if Outlines == true then
                    AddOutline(Character)
                end
                if NameTags == true then
                    AddNameTag(Character)
                end
            end)
        end)



-- UPDATING THE MOBS
 
game:GetService("Workspace").Living.ChildAdded:Connect(function() -- WHEN MOB SPAWNS
    for _,v2 in pairs(mobs) do table.remove(mobs, _) end -- REMOVES ALL THE OLD MOBS
    -- ADDS THE NEW MOBS
    for _,v in pairs(game:GetService("Workspace").Living:GetChildren()) do -- LOOPS THROUGH ALL MOBS
        insert = true -- VALUE TO CHECK THE MOB
        for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
        if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
    end
    autoFarm:Refresh(newList, true)
end)

game:GetService("Workspace").Living.ChildRemoved:Connect(function() -- WHEN MOB DIES / GETS REMOVED
    for _,v2 in pairs(mobs) do table.remove(mobs, _) end -- REMOVES ALL THE OLD MOBS
    -- ADDS THE NEW MOBS
    for _,v in pairs(game:GetService("Workspace").Living:GetChildren()) do -- LOOPS THROUGH ALL MOBS
        insert = true -- VALUE TO CHECK THE MOB
        for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
        if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
    end
    autoFarm:Refresh(newList, true)
end)
OrionLib:Init()
